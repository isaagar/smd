	
	============================================================================================
	Title:- Intermidiate Code Generation 
	============================================================================================

	******************Aicg.l**********************
	%{
		# include "y.tab.h"
		# include <string.h>
		int yylineno;
	%}
	%%
	[\n]			{yylineno++;}
	int			{return(INT);}
	void			{return(VOID);}
	main			{return(MAIN);}
	char			{return(CHAR);}	
	"="			{return('=');}
	"+"			{return('+');}
	"-"			{return('-');}
	"*"			{return('*');}
	"/"			{return('/');}
	"("			{return('(');}
	")"			{return(')');}
	"{"			{return('{');}
	"}"			{return('}');}
	","			{return(',');}
	";"			{return(';');}
	[0-9]+			{strcpy(yylval.v,yytext);return(NUM);}
	[0-9]+[a-zA-Z]*		{printf("\n ERROR:Invalid Identifier %s,Line no %d ",yytext,yylineno);return(INV);}
	[a-zA-Z][a-zA-Z_0-9]*	{strcpy(yylval.v,yytext);return(VAR);}
	[ \t]			;
	%%
	int yywrap()
	{
		return 1;
	}


	******************Aicg.y**********************

	%{
		# include <stdio.h>
		# include <string.h>
		# include <stdlib.h>
		# define max 10
		extern int yylineno;
	
		typedef struct symtab
		{
			char symbol[max];
			char type[max];
		}symtab;
	
		typedef struct quadtab
		{
			char op[max],op1[max],op2[max],result[max];
		}quadtab;

		symtab s[10];
		quadtab q[10];
		int s_ptr=0;
		int q_ptr=0,tIndex=0;
		int flag;
		char prev[max]="-1";
		char curr[max]="-1";
		int yylineno;
	
		void addquad(char op[],char op1[],char op2[],char r[]);
		void print();
		void sym_tab(char type[]);
		void make_symtab_entry(char sym[10]);
		int search_var(char sym[10]);
	%}
	%union
	{
		char v[10];
	}

	%token MAIN INT CHAR VOID
	%token <v> NUM VAR INV
	%type <v> ASSIGN E
	%left '+' '-'
	%left '*' '/'

	%%

	P:		VOID MAIN'('')' BLOCK
			;

	BLOCK:		'{'CODE'}'
			;

	CODE:		BLOCK		
			|STMT CODE
			|STMT
			;
	
	STMT:		DEC';'
			|ASSIGN ';'
			;
	
	DEC:		INT VARLIST 		{sym_tab("int");}
			|CHAR VARLIST		{sym_tab("char");}
			;

	VARLIST:	VAR','VARLIST		{
						    flag=search_var($1);
						    if(flag==-1)
							make_symtab_entry($1);
						else
							yyerror("Multiple declaration");
						}
			|VAR			{
							flag=search_var($1);
							if(flag==-1)
								make_symtab_entry($1);
							else
								yyerror("Multiple declaration");
						}		
			|INV			
			;
						
	ASSIGN:		VAR'='E			{
							flag = search_var($1);
		                                     	if (flag== -1)
	 							yyerror("Undefined symbol");
		                                    	else 
							{
								strcpy(q[q_ptr].op,"=");
								strcpy(q[q_ptr].op1,$3);
								strcpy(q[q_ptr].op2,"");
								strcpy(q[q_ptr].result,$1); 
								strcpy($$,q[q_ptr].result);
								q_ptr++;		
						
							}		
						}
			;

	E: 		E'+'E   		{  
							if  (strcmp(prev,curr)==0)
		                			{  
								addquad("+",$1,$3,$$);
		                  				strcpy(curr,"-1");
		                  				strcpy(prev,"-1");
		                			}
		                			else
		                 			{
		                  				yyerror("Type Mismatch");
		                  			}	
		              			}
			|E'-'E   		{  
							if  (strcmp(prev,curr)==0)
		                			{  
								addquad("-",$1,$3,$$);
		                  				strcpy(curr,"-1");
		                  				strcpy(prev,"-1");
		                			}
		                			else
		                 			{
		                  				yyerror("Type Mismatch");
		                  			}	
		              			}
			|E'*'E   		{  
							if  (strcmp(prev,curr)==0)
		                			{  
								addquad("*",$1,$3,$$);
		                  				strcpy(curr,"-1");
		                  				strcpy(prev,"-1");
		                			}
		                			else
		                 			{
		                  				yyerror("Type Mismatch");
		                  			}	
		              			}
			|E'/'E   		{  
							if  (strcmp(prev,curr)==0)
		                			{  
								addquad("/",$1,$3,$$);
		                  				strcpy(curr,"-1");
		                  				strcpy(prev,"-1");
		                			}
		                			else
		                 			{
		                  				yyerror("Type Mismatch");
		                  			}	
		              			}
			|'('E')'         	{ strcpy($$,$2); }
	  		|VAR                  {
						flag = search_var($1);
		                 		if(flag==-1)                                                          		       							    yyerror("Undefined Symbol");
		                 		else
		                  		{
		                       				if(strcmp(prev,"-1")==0)
		                        				strcpy(prev,s[flag].type);
		                       				else 
		                        				strcpy(curr,s[flag].type);
		                    			}
						}
			|INV
			|NUM			{strcpy($$,$1); strcpy(curr,prev);}
			;
	%%
	main()
	{
		int i;
		strcpy(curr,"-1");
		strcpy(prev,"-1");
		yyparse();
		printf("\n Symbol Table\n");
		printf("\n Symbol\tType\n");
		for(i=0;i<s_ptr;i++)
		{
			printf("\n %s\t%s",s[i].symbol,s[i].type);
		}
		printf("\n\n Qudraple Table \n");
		print();
	}

	void addquad(char op[],char op1[],char op2[],char r[])
	{
		strcpy(q[q_ptr].op,op);
		strcpy(q[q_ptr].op1,op1);
		strcpy(q[q_ptr].op2,op2); 
		sprintf(q[q_ptr].result,"t%d",tIndex++);
		strcpy(r,q[q_ptr].result);	
		q_ptr++;	
	}

	void print()
	{
		int i;
		printf("\n OP\tOP1\tOP2\tRESULT\n");	
		for(i=0;i<q_ptr;i++)
		{
			printf("\n %s\t%s\t%s\t%s",q[i].op,q[i].op1,q[i].op2,q[i].result);
		}
		printf("\n");
	}

	void sym_tab(char *type)
	{
		int j=s_ptr-1;
		while(strcmp(s[j].type,"-1")==0)
		  strcpy(s[j--].type,type);
	}

	void make_symtab_entry(char sym[10])
	{
		strcpy(s[s_ptr].type,"-1");
		strcpy(s[s_ptr].symbol,sym);
		s_ptr++;
	}

	int search_var(char sym[10])
	{
		int i;	
		for(i=0;i<s_ptr;i++)
		{
	 		if(strcmp(s[i].symbol,sym)==0) 
				return i;
		}		
		return -1;
	}


	yyerror(char* s)
	{
		printf("\n ERROR: %s ,Line no: %d \n",s,yylineno);
	}

	******************ticg**********************

	void main()
	{
		 int a,b,c;
		 a=10;
		 b=20;
		 c=a+b*c;
	}

	******************ticg1**********************
	void main()
	{
		int a,b,0c;
		a=10;	
		b=20;	
		c=a+b*6;
	}



************************OUTPUT************************

	****************WITHOUT ERROR***********************

	[root@localhost]# lex Aicg.l
	[root@localhost]# yacc -d Aicg.y
	[root@localhost]# cc lex.yy.c y.tab.c
	[root@localhost]# ./a.out <ticg

	 Symbol Table

	 Symbol	Type

	 c	int
	 b	int
	 a	int

	 Qudraple Table 

	 OP	OP1	OP2	RESULT

	 =	10		a
	 =	20		b
	 *	b	c	t0
	 +	a	t0	t1
	 =	t1		c

	****************WITH ERROR***********************

	[root@localhost]# lex Aicg.l
	[root@localhost]# yacc -d Aicg.y
	[root@localhost]# cc lex.yy.c y.tab.c
	[root@localhost]# ./a.out <ticg1

	 ERROR:Invalid Identifier 0c,Line no 3 
	 ERROR: Undefined symbol ,Line no: 6 

	 Symbol Table

	 Symbol	Type

	 b	int
	 a	int

	 Qudraple Table 

	 OP	OP1	OP2	RESULT

	 =	10		a
	 =	20		b
	 *	b	6	t0
	 +	a	t0	t1




